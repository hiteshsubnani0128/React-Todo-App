{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Todo","props","Card","style","width","CardContent","Checkbox","onChange","onToggle","checked","todo","indeterminate","id","for","check","textDecoration","text","onClick","onDelete","App","handleChange","event","setState","value","target","handleSubmit","state","todos","preventDefault","addTodo","removeChecked","filter","this","map","length","Button","variant","color","onSubmit","TextField","label","type","className","deleteTodo","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f756ad82.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Card from '@material-ui/core/Card';\nimport TextField from '@material-ui/core/TextField';\nimport CardContent from \"@material-ui/core/CardContent\";\n\nlet myCheck = (check) =>{\n  if(check) return {textDecoration: 'line-through'}\n  return {textDecoration: 'none'}\n}\n\nconst Todo = (props) => (\n  <div>\n    <Card style={{width: \"60%\"}}>\n        <CardContent>\n    <li>\n      <Checkbox\n       onChange={props.onToggle} \n       checked={props.todo.checked}\n       indeterminate\n       id={props.todo.id}\n       />\n\n      <label for={props.todo.id} style={myCheck(props.todo.checked)}>{props.todo.text}</label>\n      <button onClick={props.onDelete}>Delete</button>\n    </li>\n    </CardContent>\n      </Card>\n  </div>\n)\n\nlet id=0;\n// let newDate = new Date();\nclass App extends Component{\n  \n  constructor(props){\n    super(props);\n    this.state ={\n      todos :[],\n      value:''\n    }\n  }\n\n  handleChange = (event)=>{ \n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit = (event) => {\n    if(this.state.value){\n    this.setState({ todos : [...this.state.todos, {text: this.state.value, id:id++, checked:false}],value : '' });\n    event.preventDefault();\n    } else{\n      event.preventDefault();\n    }\n  }\n\n  addTodo = (event)=>{\n    // const text = prompt(\"Enter your Todo\");\n    this.setState({ todos : [...this.state.todos, {text: event.target.value, id:id++, checked:false}]})\n  }\n\n  deleteTodo(id){\n    this.setState({todos: this.state.todos.filter(todo => todo.id !== id) })\n  }\n  \n  removeChecked = ()=> {\n    this.setState({todos: this.state.todos.filter(todo => !todo.checked) })\n  }\n\n  onToggle(id){\n    this.setState({todos: this.state.todos.map(todo => {\n      if(todo.id!==id) return todo\n      return{\n        id : todo.id,\n        text: todo.text,\n        checked : !todo.checked\n      }\n    }) })\n  }\n\n  render(){\n    return(\n      <div>\n        <h2>Total Todos :- {this.state.todos.length}</h2>\n        <h2>Remaning Todos :- { this.state.todos.filter(todo => !todo.checked).length } </h2>\n        <Button onClick={this.removeChecked} variant=\"contained\" color=\"primary\">\n        Remove All checked\n        </Button>\n        <form onSubmit={this.handleSubmit}>\n            <TextField id=\"standard-basic\" label=\"Enter your Todo\" type=\"text\" value={this.state.value} onChange={this.handleChange} />\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n          Submit\n          </Button>\n        </form>\n\n        <ul className='appCenter'>\n          {this.state.todos.map(todo => <Todo \n          todo={todo}\n          onDelete = {() => this.deleteTodo(todo.id)}\n          onToggle = {() => this.onToggle(todo.id)}\n          />)}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}